name: PR Tests

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - edited
      - ready_for_review
      - labeled
      - unlabeled

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js 20.x
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run lint
        run: npm run lint
  test:
    name: Unit Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js 20.x
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests & coverage
        run: npm run test:ci

      - name: Install jq for parsing JSON
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Extract coverage summary
        id: coverage
        run: |
          FILE=$(find coverage -type f -name coverage-summary.json | head -n1)
          echo "coverage<<EOF" >> $GITHUB_OUTPUT
          # dump the full, formatted JSON
          jq . "$FILE"        >> $GITHUB_OUTPUT
          echo "EOF"          >> $GITHUB_OUTPUT

      - name: Generate Markdown summary
        id: summary
        shell: bash
        run: |
          # locate both JSON files under coverage/
          COV_FILE=$(find coverage -type f -name coverage-summary.json | head -n1)
          TEST_FILE=$(find coverage -type f -name test-results.json     | head -n1)

          # now pull out the bits you need
          TOTAL=$(jq .summary.total    "${TEST_FILE}")
          PASS=$(jq .summary.success  "${TEST_FILE}")
          FAIL=$(jq .summary.failed   "${TEST_FILE}")

          STMT=$(jq .total.statements.pct "${COV_FILE}")
          BRNC=$(jq .total.branches.pct   "${COV_FILE}")
          FUNC=$(jq .total.functions.pct  "${COV_FILE}")
          LINE=$(jq .total.lines.pct      "${COV_FILE}")

          # build the Markdown
          read -r -d '' TABLE <<EOF
          | üìä Metric              | üî¢ Value       |
          | ---------------------- | ------------: |
          | ‚úÖ Tests Passed        | ${PASS}/${TOTAL} |
          | ‚ùå Tests Failed        | ${FAIL}         |
          | üìë Statements Coverage | ${STMT}%        |
          | üåø Branches Coverage   | ${BRNC}%        |
          | üîß Functions Coverage  | ${FUNC}%        |
          | üìã Lines Coverage      | ${LINE}%        |
          EOF

          # emit as a multiline output
          echo "report<<EOF" >> $GITHUB_OUTPUT
          echo "$TABLE"         >> $GITHUB_OUTPUT
          echo "EOF"            >> $GITHUB_OUTPUT

      - name: Comment summary to PR
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## üõ†Ô∏è CI Test & Coverage Report
            ${{ steps.summary.outputs.report }}
